diff --git a/fesm2022/router.mjs b/fesm2022/router.mjs
index a900be9b171d9159ead8a782f6b87ddd37c72ca0..43eb88c23c67b8d1d972e8368caa046aa1d10fca 100755
--- a/fesm2022/router.mjs
+++ b/fesm2022/router.mjs
@@ -3881,7 +3881,7 @@ class Recognizer {
         if (route.redirectTo.startsWith('/')) {
             this.absoluteRedirectCount++;
             if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {
-                if (ngDevMode) {
+                if (typeof ngDevMode !== 'undefined' && ngDevMode) {
                     throw new ɵRuntimeError(4016 /* RuntimeErrorCode.INFINITE_REDIRECT */, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.\n` +
                         `This is currently a dev mode only error but will become a` +
                         ` call stack size exceeded error in production in a future major version.`);
@@ -4381,8 +4381,8 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0", ngImpor
         }] });
 
 /// <reference types="@types/dom-view-transitions" />
-const CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? 'view transition helper' : '');
-const VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? 'view transition options' : '');
+const CREATE_VIEW_TRANSITION = new InjectionToken((typeof ngDevMode !== 'undefined' && ngDevMode) ? 'view transition helper' : '');
+const VIEW_TRANSITION_OPTIONS = new InjectionToken((typeof ngDevMode !== 'undefined' && ngDevMode) ? 'view transition options' : '');
 /**
  * A helper function for using browser view transitions. This function skips the call to
  * `startViewTransition` if the browser does not support it.
@@ -5221,7 +5221,7 @@ class Router {
         this.navigationTransitions.setupNavigations(this, this.currentUrlTree, this.routerState)
             .subscribe({
             error: (e) => {
-                this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);
+                this.console.warn((typeof ngDevMode !== 'undefined' && ngDevMode) ? `Unhandled Navigation Error: ${e}` : e);
             }
         });
         this.subscribeToNavigationEvents();
